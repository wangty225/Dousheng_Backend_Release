// Code generated by hertz generator.

package user_hertz

import (
	"Dousheng_Backend/hertz/hertz-gen/client"
	"Dousheng_Backend/utils"
	"Dousheng_Backend/utils/config"
	"Dousheng_Backend/utils/zap"
	"context"
	"fmt"
	"net/http"

	user_hertz "Dousheng_Backend/hertz/hertz-gen/biz/model/user_hertz"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var logger = zap.InitLogger(config.InitConfig("./config/logger/user.yml"))

// User .
// @router /douyin/user/ [GET]
func User(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_hertz.DouyinUserRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId := c.Query("user_id")
	token := c.Query("token")
	if len(userId) == 0 || len(token) == 0 {
		message := "[hertz] userid或token不能为空"
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, user_hertz.DouyinUserResponse{
			StatusCode: -1,
			StatusMsg:  &message,
			User:       user_hertz.NewUser(),
		})
		return
	}
	// 用户信息查询逻辑
	resp, err := client.User(ctx, &req)
	if err != nil {
		message := fmt.Sprintf("[hertz] %v\n", err)
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, user_hertz.DouyinUserResponse{
			StatusCode: -1,
			StatusMsg:  &message,
			User:       user_hertz.NewUser(),
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
}

// RegisterUser .
// @router /douyin/user/register/ [POST]
func RegisterUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_hertz.DouyinUserRegisterRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	username := c.Query("username")
	password := c.Query("password")
	if len(username) == 0 || len(password) == 0 || utils.ContainsInvalidCharacters(password) {
		message := "[hertz] username或password不合法"
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, user_hertz.DouyinUserResponse{
			StatusCode: -1,
			StatusMsg:  &message,
			User:       user_hertz.NewUser(),
		})
		return
	}

	resp, err := client.RegisterUser(ctx, &req)
	if err != nil {
		message := fmt.Sprintf("[hertz]%v\n", err)
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, user_hertz.DouyinUserRegisterResponse{
			StatusCode: 0,
			StatusMsg:  &message,
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
	logger.Infoln("[hertz] StatusOK: ", resp.StatusMsg)
}

// LoginUser .
// @router /douyin/user/login/ [POST]
func LoginUser(ctx context.Context, c *app.RequestContext) {
	var err error
	var req user_hertz.DouyinUserLoginRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.Errorln("[hertz] ", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	// 增加参数校验部分
	username := c.Query("username")
	password := c.Query("password")
	if len(username) == 0 || len(password) == 0 || utils.ContainsInvalidCharacters(password) {
		message := "[hertz] 用户名或密码不合法，请重新登录！"
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, user_hertz.DouyinUserLoginResponse{
			StatusCode: -1,
			StatusMsg:  &message,
		})
		return
	}

	if len(username) > 20 || len(password) > 20 {
		message := "[hertz] 用户名或密码不能大于20个字符"
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, user_hertz.DouyinUserLoginResponse{
			StatusCode: -1,
			StatusMsg:  &message,
		})
		return
	}

	// 完善登录逻辑
	resp, err := client.LoginUser(ctx, &req)
	if err != nil {
		message := fmt.Sprintf("[hertz]%v\n", err)
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, user_hertz.DouyinUserLoginResponse{
			StatusCode: -1,
			StatusMsg:  &message,
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
	logger.Infoln("[hertz] StatusOK: ", resp.StatusMsg)
}
