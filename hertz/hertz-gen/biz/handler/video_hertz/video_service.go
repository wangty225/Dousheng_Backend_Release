// Code generated by hertz generator.

package video_hertz

import (
	"Dousheng_Backend/hertz/hertz-gen/biz/model/video_hertz"
	"Dousheng_Backend/hertz/hertz-gen/client"
	"Dousheng_Backend/utils/config"
	"Dousheng_Backend/utils/zap"
	"bytes"
	"context"
	"fmt"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
	"io"
	"mime/multipart"
	"net/http"
	"time"
)

var logger = zap.InitLogger(config.InitConfig("./config/logger/video.yml"))

// Feed .
// @router /douyin/feed/ [GET]
func Feed(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video_hertz.DouyinFeedRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.Errorln("[hertz] ", err.Error())
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	resp, err := client.VideoFeed(ctx, &req)

	if err != nil {
		message := fmt.Sprintf("[hertz] %v\n", err)
		logger.Errorln(message)
		ntime := time.Now().Unix()
		c.JSON(http.StatusBadRequest, video_hertz.DouyinFeedResponse{
			StatusCode: -1,
			StatusMsg:  &message,
			VideoList:  make([]*video_hertz.Video, 0),
			NextTime:   &ntime,
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
	logger.Infoln("[hertz] StatusOK: ", resp.StatusMsg)
}

// ActionPublish .
// @router /douyin/publish/action/ [POST]
func ActionPublish(ctx context.Context, c *app.RequestContext) {
	var err error
	var message string

	file, err := c.FormFile("data")
	if err != nil {
		message = fmt.Sprintf("[hertz] %v\n", err)
		logger.Errorln(message)
		c.JSON(consts.StatusBadRequest, video_hertz.DouyinPublishActionResponse{
			StatusCode: -1,
			StatusMsg:  &message,
		})
		return
	}
	src, err := file.Open()
	defer func(src multipart.File) {
		err := src.Close()
		if err != nil {
		}
	}(src)
	buf := bytes.NewBuffer(nil)
	if _, err := io.Copy(buf, src); err != nil {
		message = fmt.Sprintf("[hertz] %v\n", err)
		logger.Errorln(message)
		c.JSON(consts.StatusBadRequest, video_hertz.DouyinPublishActionResponse{
			StatusCode: -1,
			StatusMsg:  &message,
		})
	}
	token := c.PostForm("token")
	title := c.PostForm("title")
	if token == "" {
		message := "[hertz] token 不能为空！"
		c.String(http.StatusBadRequest, message)
		logger.Errorln(message)
		return
	}
	convertReq := video_hertz.DouyinPublishActionRequest{
		Token: token,
		Data:  buf.Bytes(),
		Title: title,
	}
	resp, err0 := client.PublishAction(ctx, &convertReq)
	if err0 != nil {
		message := fmt.Sprintf("[hertz] %v\n", err0)
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, video_hertz.DouyinPublishActionResponse{
			StatusCode: -1,
			StatusMsg:  &message,
		})
		return
	}

	c.JSON(http.StatusOK, video_hertz.DouyinPublishActionResponse{
		StatusCode: resp.StatusCode,
		StatusMsg:  resp.StatusMsg,
	})
	logger.Infoln("[hertz] StatusOK: ", resp.StatusMsg)
	return
}

// ListPublish .
// @router /douyin/publish/list/ [GET]
func ListPublish(ctx context.Context, c *app.RequestContext) {
	var err error
	var req video_hertz.DouyinPublishListRequest
	var message string
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.Errorln("[hertz] ", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId := c.Query("user_id")
	token := c.Query("token")
	videoList := make([]*video_hertz.Video, 0)
	if len(userId) == 0 || len(token) == 0 {
		message = "[hertz] token不能为空，请携带有效token访问"
		logger.Errorln(message)
		c.JSON(consts.StatusBadRequest, video_hertz.DouyinPublishListResponse{
			StatusCode: -1,
			StatusMsg:  &message,
			VideoList:  videoList,
		})
		return
	}
	resp, err := client.PublishList(ctx, &req)
	if err != nil {
		message := fmt.Sprintf("[hertz] %v\n", err)
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, video_hertz.DouyinPublishListResponse{
			StatusCode: -1,
			StatusMsg:  &message,
			VideoList:  videoList,
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
	logger.Infoln("[hertz] StatusOK: ", resp.StatusMsg)
}
