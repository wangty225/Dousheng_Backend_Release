// Code generated by hertz generator.

package interaction_hertz

import (
	"Dousheng_Backend/hertz/hertz-gen/biz/model/video_hertz"
	"Dousheng_Backend/hertz/hertz-gen/client"
	"Dousheng_Backend/utils/config"
	"Dousheng_Backend/utils/zap"
	"context"
	"fmt"
	"net/http"
	"strconv"

	"Dousheng_Backend/hertz/hertz-gen/biz/model/interaction_hertz"
	"github.com/cloudwego/hertz/pkg/app"
	"github.com/cloudwego/hertz/pkg/protocol/consts"
)

var logger = zap.InitLogger(config.InitConfig("./config/logger/interaction.yml"))

// ActionFavorite .
// @router /douyin/favorite/action/ [POST]
func ActionFavorite(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction_hertz.DouyinFavoriteActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.Errorln("[hertz] ", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	token := c.Query("token")
	videoId := c.Query("video_id")
	actionType := c.Query("action_type") // 1点赞，2取消电子赞
	if len(token) == 0 || len(videoId) == 0 || !(actionType == strconv.Itoa(1) || actionType == strconv.Itoa(2)) {
		message := "[hertz] 请检查输入参数！"
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, interaction_hertz.DouyinFavoriteActionResponse{
			StatusCode: -1,
			StatusMsg:  &message,
		})
		return
	}

	resp, err := client.FavoriteAction(ctx, &req)
	if err != nil {
		message := fmt.Sprintf("[hertz] %v\n", err)
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, interaction_hertz.DouyinFavoriteActionResponse{
			StatusCode: -1,
			StatusMsg:  &message,
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
	logger.Infoln("[hertz] StatusOK: ", resp.StatusMsg)
}

// ListFavorite .
// @router /douyin/favorite/list/ [GET]
func ListFavorite(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction_hertz.DouyinFavoriteListRequest
	var message string
	err = c.BindAndValidate(&req)
	if err != nil {
		logger.Errorln("[hertz] ", err)
		c.String(consts.StatusBadRequest, err.Error())
		return
	}
	userId := c.Query("user_id")
	token := c.Query("token")
	videoList := make([]*video_hertz.Video, 0)
	if len(userId) == 0 || len(token) == 0 {
		message = "[hertz] token不能为空，请携带有效token和userid访问"
		logger.Errorln(message)
		c.JSON(consts.StatusBadRequest, interaction_hertz.DouyinFavoriteListResponse{
			StatusCode: -1,
			StatusMsg:  &message,
			VideoList:  videoList,
		})
		return
	}

	resp, err := client.FavoriteList(ctx, &req)
	if err != nil {
		message := fmt.Sprintf("[hertz] %v\n", err)
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, interaction_hertz.DouyinFavoriteListResponse{
			StatusCode: -1,
			StatusMsg:  &message,
			VideoList:  videoList,
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
	logger.Infoln("[hertz] StatusOK: ", resp.StatusMsg)
}

// ActionComment .
// @router /douyin/comment/action/ [POST]
func ActionComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction_hertz.DouyinCommentActionRequest
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		return
	}

	token := c.Query("token")
	videoId := c.Query("video_id")
	actionType := c.Query("action_type") // 1点赞，2取消电子赞
	if len(token) == 0 || len(videoId) == 0 || !(actionType == strconv.Itoa(1) || actionType == strconv.Itoa(2)) {
		message := "[hertz] 请检查输入参数！"
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, interaction_hertz.DouyinCommentActionResponse{
			StatusCode: -1,
			StatusMsg:  &message,
			//Comment:    nil,
		})
		return
	}

	resp, err := client.CommentAction(ctx, &req)
	if err != nil {
		message := fmt.Sprintf("[hertz] %v\n", err)
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, interaction_hertz.DouyinCommentActionResponse{
			StatusCode: -1,
			StatusMsg:  &message,
			//Comment:    nil,
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
	logger.Infoln("[hertz] StatusOK: ", resp.StatusMsg)
}

// ListComment .
// @router /douyin/comment/list/ [GET]
func ListComment(ctx context.Context, c *app.RequestContext) {
	var err error
	var req interaction_hertz.DouyinCommentListRequest
	var message string
	err = c.BindAndValidate(&req)
	if err != nil {
		c.String(consts.StatusBadRequest, err.Error())
		logger.Errorln("[hertz] StatusBadRequest :", err)
		return
	}
	videoId := c.Query("video_id")
	token := c.Query("token")
	//commentList := make([]*interaction_hertz.Comment, 0)
	if len(videoId) == 0 || len(token) == 0 {
		message = "[hertz] token不能为空，请携带有效token和userid访问"
		logger.Errorln(message)
		c.JSON(consts.StatusBadRequest, interaction_hertz.DouyinCommentListResponse{
			StatusCode:  -1,
			StatusMsg:   &message,
			CommentList: nil,
		})
		return
	}

	resp, err := client.CommentList(ctx, &req)
	if err != nil {
		message := fmt.Sprintf("[hertz] %v\n", err)
		logger.Errorln(message)
		c.JSON(http.StatusBadRequest, interaction_hertz.DouyinCommentListResponse{
			StatusCode:  -1,
			StatusMsg:   &message,
			CommentList: nil,
		})
		return
	}
	c.JSON(consts.StatusOK, resp)
	logger.Infoln("[hertz] StatusOK: ", resp.StatusMsg)
}
