// Code generated by Kitex v0.6.2. DO NOT EDIT.

package interactionservice

import (
	interaction "Dousheng_Backend/internal/mircoservice/interaction/kitex-gen/interaction"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return interactionServiceServiceInfo
}

var interactionServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "InteractionService"
	handlerType := (*interaction.InteractionService)(nil)
	methods := map[string]kitex.MethodInfo{
		"ActionFavorite": kitex.NewMethodInfo(actionFavoriteHandler, newInteractionServiceActionFavoriteArgs, newInteractionServiceActionFavoriteResult, false),
		"ListFavorite":   kitex.NewMethodInfo(listFavoriteHandler, newInteractionServiceListFavoriteArgs, newInteractionServiceListFavoriteResult, false),
		"ActionComment":  kitex.NewMethodInfo(actionCommentHandler, newInteractionServiceActionCommentArgs, newInteractionServiceActionCommentResult, false),
		"ListComment":    kitex.NewMethodInfo(listCommentHandler, newInteractionServiceListCommentArgs, newInteractionServiceListCommentResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "interaction",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func actionFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceActionFavoriteArgs)
	realResult := result.(*interaction.InteractionServiceActionFavoriteResult)
	success, err := handler.(interaction.InteractionService).ActionFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceActionFavoriteArgs() interface{} {
	return interaction.NewInteractionServiceActionFavoriteArgs()
}

func newInteractionServiceActionFavoriteResult() interface{} {
	return interaction.NewInteractionServiceActionFavoriteResult()
}

func listFavoriteHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceListFavoriteArgs)
	realResult := result.(*interaction.InteractionServiceListFavoriteResult)
	success, err := handler.(interaction.InteractionService).ListFavorite(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceListFavoriteArgs() interface{} {
	return interaction.NewInteractionServiceListFavoriteArgs()
}

func newInteractionServiceListFavoriteResult() interface{} {
	return interaction.NewInteractionServiceListFavoriteResult()
}

func actionCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceActionCommentArgs)
	realResult := result.(*interaction.InteractionServiceActionCommentResult)
	success, err := handler.(interaction.InteractionService).ActionComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceActionCommentArgs() interface{} {
	return interaction.NewInteractionServiceActionCommentArgs()
}

func newInteractionServiceActionCommentResult() interface{} {
	return interaction.NewInteractionServiceActionCommentResult()
}

func listCommentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*interaction.InteractionServiceListCommentArgs)
	realResult := result.(*interaction.InteractionServiceListCommentResult)
	success, err := handler.(interaction.InteractionService).ListComment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newInteractionServiceListCommentArgs() interface{} {
	return interaction.NewInteractionServiceListCommentArgs()
}

func newInteractionServiceListCommentResult() interface{} {
	return interaction.NewInteractionServiceListCommentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) ActionFavorite(ctx context.Context, req *interaction.DouyinFavoriteActionRequest) (r *interaction.DouyinFavoriteActionResponse, err error) {
	var _args interaction.InteractionServiceActionFavoriteArgs
	_args.Req = req
	var _result interaction.InteractionServiceActionFavoriteResult
	if err = p.c.Call(ctx, "ActionFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListFavorite(ctx context.Context, req *interaction.DouyinFavoriteListRequest) (r *interaction.DouyinFavoriteListResponse, err error) {
	var _args interaction.InteractionServiceListFavoriteArgs
	_args.Req = req
	var _result interaction.InteractionServiceListFavoriteResult
	if err = p.c.Call(ctx, "ListFavorite", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ActionComment(ctx context.Context, req *interaction.DouyinCommentActionRequest) (r *interaction.DouyinCommentActionResponse, err error) {
	var _args interaction.InteractionServiceActionCommentArgs
	_args.Req = req
	var _result interaction.InteractionServiceActionCommentResult
	if err = p.c.Call(ctx, "ActionComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) ListComment(ctx context.Context, req *interaction.DouyinCommentListRequest) (r *interaction.DouyinCommentListResponse, err error) {
	var _args interaction.InteractionServiceListCommentArgs
	_args.Req = req
	var _result interaction.InteractionServiceListCommentResult
	if err = p.c.Call(ctx, "ListComment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
