// Code generated by Kitex v0.6.2. DO NOT EDIT.

package userservice

import (
	user "Dousheng_Backend/internal/mircoservice/user/kitex-gen/user"
	"context"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
)

func serviceInfo() *kitex.ServiceInfo {
	return userServiceServiceInfo
}

var userServiceServiceInfo = NewServiceInfo()

func NewServiceInfo() *kitex.ServiceInfo {
	serviceName := "UserService"
	handlerType := (*user.UserService)(nil)
	methods := map[string]kitex.MethodInfo{
		"User":         kitex.NewMethodInfo(userHandler, newUserServiceUserArgs, newUserServiceUserResult, false),
		"RegisterUser": kitex.NewMethodInfo(registerUserHandler, newUserServiceRegisterUserArgs, newUserServiceRegisterUserResult, false),
		"LoginUser":    kitex.NewMethodInfo(loginUserHandler, newUserServiceLoginUserArgs, newUserServiceLoginUserResult, false),
	}
	extra := map[string]interface{}{
		"PackageName": "user",
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.6.2",
		Extra:           extra,
	}
	return svcInfo
}

func userHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceUserArgs)
	realResult := result.(*user.UserServiceUserResult)
	success, err := handler.(user.UserService).User(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceUserArgs() interface{} {
	return user.NewUserServiceUserArgs()
}

func newUserServiceUserResult() interface{} {
	return user.NewUserServiceUserResult()
}

func registerUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceRegisterUserArgs)
	realResult := result.(*user.UserServiceRegisterUserResult)
	success, err := handler.(user.UserService).RegisterUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceRegisterUserArgs() interface{} {
	return user.NewUserServiceRegisterUserArgs()
}

func newUserServiceRegisterUserResult() interface{} {
	return user.NewUserServiceRegisterUserResult()
}

func loginUserHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*user.UserServiceLoginUserArgs)
	realResult := result.(*user.UserServiceLoginUserResult)
	success, err := handler.(user.UserService).LoginUser(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newUserServiceLoginUserArgs() interface{} {
	return user.NewUserServiceLoginUserArgs()
}

func newUserServiceLoginUserResult() interface{} {
	return user.NewUserServiceLoginUserResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) User(ctx context.Context, req *user.DouyinUserRequest) (r *user.DouyinUserResponse, err error) {
	var _args user.UserServiceUserArgs
	_args.Req = req
	var _result user.UserServiceUserResult
	if err = p.c.Call(ctx, "User", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) RegisterUser(ctx context.Context, req *user.DouyinUserRegisterRequest) (r *user.DouyinUserRegisterResponse, err error) {
	var _args user.UserServiceRegisterUserArgs
	_args.Req = req
	var _result user.UserServiceRegisterUserResult
	if err = p.c.Call(ctx, "RegisterUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) LoginUser(ctx context.Context, req *user.DouyinUserLoginRequest) (r *user.DouyinUserLoginResponse, err error) {
	var _args user.UserServiceLoginUserArgs
	_args.Req = req
	var _result user.UserServiceLoginUserResult
	if err = p.c.Call(ctx, "LoginUser", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
